.TH "lsb_parameterinfo" 3 "10 Jun 2021" "Version 10.1" "IBM Spectrum LSF 10.1 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_parameterinfo \- lsb_parameterinfo 
Returns information about the LSF cluster.
.PP
\fBlsb_parameterinfo\fP gets information about the LSF cluster.
.PP
The static storage for the \fBparameterInfo\fP structure is reused on the next call.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fB struct \fBparameterInfo\fP *lsb_parameterinfo(char **names, int *numUsers, int options)\fP
.PP
.SH "Parameters:"
\fI**names\fP Reserved but not used; supply NULL. 
.br
\fI*numUsers\fP Reserved but not used; supply NULL. 
.br
\fIoptions\fP Reserved but not used; supply 0.
.PP
.SH "Data Structures:" 
.PP
\fBparameterInfo\fP
.PP
.SH "Define Statements:" 
.PP
none
.PP
.SH "Returns:"
struct \fBparameterInfo\fP *:A pointer to a \fBparameterInfo\fP structure.
.br
 The function was a successful. 
.PP
NULL 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
If the function fails, lsberrno is set to indicate the error.
.PP
.SH "Equivalent line command:" 
.PP
none
.PP
.SH "Files:" 
.PP
$LSB_CONFDIR/cluster_name/configdir/lsb.params
.PP
.SH "See also:"
none 
.PP

.ad l
.nh
.SH NAME
parameterInfo \- The \fBparameterInfo\fP structure contains the following fields:.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBdefaultQueues\fP"
.br
.ti -1c
.RI "char * \fBdefaultHostSpec\fP"
.br
.ti -1c
.RI "int \fBmbatchdInterval\fP"
.br
.ti -1c
.RI "int \fBsbatchdInterval\fP"
.br
.ti -1c
.RI "int \fBjobAcceptInterval\fP"
.br
.ti -1c
.RI "int \fBjobAcceptIntervalUnit\fP"
.br
.ti -1c
.RI "int \fBmaxDispRetries\fP"
.br
.ti -1c
.RI "int \fBmaxSbdRetries\fP"
.br
.ti -1c
.RI "int \fBpreemptPeriod\fP"
.br
.ti -1c
.RI "int \fBcleanPeriod\fP"
.br
.ti -1c
.RI "int \fBmaxNumJobs\fP"
.br
.ti -1c
.RI "float \fBhistoryHours\fP"
.br
.ti -1c
.RI "int \fBpgSuspendIt\fP"
.br
.ti -1c
.RI "char * \fBdefaultProject\fP"
.br
.ti -1c
.RI "int \fBretryIntvl\fP"
.br
.ti -1c
.RI "int \fBnqsQueuesFlags\fP"
.br
.ti -1c
.RI "int \fBnqsRequestsFlags\fP"
.br
.ti -1c
.RI "int \fBmaxPreExecRetry\fP"
.br
.ti -1c
.RI "int \fBlocalMaxPreExecRetry\fP"
.br
.ti -1c
.RI "int \fBeventWatchTime\fP"
.br
.ti -1c
.RI "float \fBrunTimeFactor\fP"
.br
.ti -1c
.RI "float \fBwaitTimeFactor\fP"
.br
.ti -1c
.RI "float \fBrunJobFactor\fP"
.br
.ti -1c
.RI "int \fBeEventCheckIntvl\fP"
.br
.ti -1c
.RI "int \fBrusageUpdateRate\fP"
.br
.ti -1c
.RI "int \fBrusageUpdatePercent\fP"
.br
.ti -1c
.RI "int \fBcondCheckTime\fP"
.br
.ti -1c
.RI "int \fBmaxSbdConnections\fP"
.br
.ti -1c
.RI "int \fBrschedInterval\fP"
.br
.ti -1c
.RI "int \fBmaxSchedStay\fP"
.br
.ti -1c
.RI "int \fBfreshPeriod\fP"
.br
.ti -1c
.RI "int \fBpreemptFor\fP"
.br
.ti -1c
.RI "int \fBadminSuspend\fP"
.br
.ti -1c
.RI "int \fBuserReservation\fP"
.br
.ti -1c
.RI "float \fBcpuTimeFactor\fP"
.br
.ti -1c
.RI "int \fBfyStart\fP"
.br
.ti -1c
.RI "int \fBmaxJobArraySize\fP"
.br
.ti -1c
.RI "time_t \fBexceptReplayPeriod\fP"
.br
.ti -1c
.RI "int \fBjobTerminateInterval\fP"
.br
.ti -1c
.RI "int \fBdisableUAcctMap\fP"
.br
.ti -1c
.RI "int \fBenforceFSProj\fP"
.br
.ti -1c
.RI "int \fBenforceProjCheck\fP"
.br
.ti -1c
.RI "int \fBjobRunTimes\fP"
.br
.ti -1c
.RI "int \fBdbDefaultIntval\fP"
.br
.ti -1c
.RI "int \fBdbHjobCountIntval\fP"
.br
.ti -1c
.RI "int \fBdbQjobCountIntval\fP"
.br
.ti -1c
.RI "int \fBdbUjobCountIntval\fP"
.br
.ti -1c
.RI "int \fBdbJobResUsageIntval\fP"
.br
.ti -1c
.RI "int \fBdbLoadIntval\fP"
.br
.ti -1c
.RI "int \fBdbJobInfoIntval\fP"
.br
.ti -1c
.RI "int \fBjobDepLastSub\fP"
.br
.ti -1c
.RI "int \fBmaxJobNameDep\fP"
.br
.ti -1c
.RI "char * \fBdbSelectLoad\fP"
.br
.ti -1c
.RI "int \fBjobSynJgrp\fP"
.br
.ti -1c
.RI "char * \fBpjobSpoolDir\fP"
.br
.ti -1c
.RI "int \fBmaxUserPriority\fP"
.br
.ti -1c
.RI "int \fBjobPriorityValue\fP"
.br
.ti -1c
.RI "int \fBjobPriorityTime\fP"
.br
.ti -1c
.RI "int \fBenableAutoAdjust\fP"
.br
.ti -1c
.RI "int \fBautoAdjustAtNumPend\fP"
.br
.ti -1c
.RI "float \fBautoAdjustAtPercent\fP"
.br
.ti -1c
.RI "int \fBsharedResourceUpdFactor\fP"
.br
.ti -1c
.RI "int \fBscheRawLoad\fP"
.br
.ti -1c
.RI "char * \fBjobAttaDir\fP"
.br
.ti -1c
.RI "int \fBmaxJobMsgNum\fP"
.br
.ti -1c
.RI "int \fBmaxJobAttaSize\fP"
.br
.ti -1c
.RI "int \fBmbdRefreshTime\fP"
.br
.ti -1c
.RI "int \fBupdJobRusageInterval\fP"
.br
.ti -1c
.RI "char * \fBsysMapAcct\fP"
.br
.ti -1c
.RI "int \fBpreExecDelay\fP"
.br
.ti -1c
.RI "int \fBupdEventUpdateInterval\fP"
.br
.ti -1c
.RI "int \fBresourceReservePerSlot\fP"
.br
.ti -1c
.RI "int \fBmaxJobId\fP"
.br
.ti -1c
.RI "char * \fBpreemptResourceList\fP"
.br
.ti -1c
.RI "int \fBpreemptionWaitTime\fP"
.br
.ti -1c
.RI "int \fBmaxAcctArchiveNum\fP"
.br
.ti -1c
.RI "int \fBacctArchiveInDays\fP"
.br
.ti -1c
.RI "int \fBacctArchiveInSize\fP"
.br
.ti -1c
.RI "float \fBcommittedRunTimeFactor\fP"
.br
.ti -1c
.RI "int \fBenableHistRunTime\fP"
.br
.ti -1c
.RI "int \fBmcbOlmReclaimTimeDelay\fP"
.br
.ti -1c
.RI "int \fBchunkJobDuration\fP"
.br
.ti -1c
.RI "int \fBsessionInterval\fP"
.br
.ti -1c
.RI "int \fBpublishReasonJobNum\fP"
.br
.ti -1c
.RI "int \fBpublishReasonInterval\fP"
.br
.ti -1c
.RI "int \fBpublishReason4AllJobInterval\fP"
.br
.ti -1c
.RI "int \fBmcUpdPendingReasonInterval\fP"
.br
.ti -1c
.RI "int \fBmcUpdPendingReasonPkgSize\fP"
.br
.ti -1c
.RI "int \fBnoPreemptRunTime\fP"
.br
.ti -1c
.RI "int \fBnoPreemptFinishTime\fP"
.br
.ti -1c
.RI "char * \fBacctArchiveAt\fP"
.br
.ti -1c
.RI "int \fBabsoluteRunLimit\fP"
.br
.ti -1c
.RI "int \fBlsbExitRateDuration\fP"
.br
.ti -1c
.RI "int \fBlsbTriggerDuration\fP"
.br
.ti -1c
.RI "int \fBmaxJobinfoQueryPeriod\fP"
.br
.ti -1c
.RI "int \fBjobSubRetryInterval\fP"
.br
.ti -1c
.RI "int \fBpendingJobThreshold\fP"
.br
.ti -1c
.RI "int \fBpendingJobSlotsThreshold\fP"
.br
.ti -1c
.RI "int \fBtotalRunPendJobThreshold\fP"
.br
.ti -1c
.RI "int \fBmaxConcurrentJobQuery\fP"
.br
.ti -1c
.RI "int \fBminSwitchPeriod\fP"
.br
.ti -1c
.RI "int \fBcondensePendingReasons\fP"
.br
.ti -1c
.RI "int \fBslotBasedParallelSched\fP"
.br
.ti -1c
.RI "int \fBdisableUserJobMovement\fP"
.br
.ti -1c
.RI "int \fBdetectIdleJobAfter\fP"
.br
.ti -1c
.RI "int \fBuseSymbolPriority\fP"
.br
.ti -1c
.RI "int \fBJobPriorityRound\fP"
.br
.ti -1c
.RI "char * \fBpriorityMapping\fP"
.br
.ti -1c
.RI "int \fBmaxInfoDirs\fP"
.br
.ti -1c
.RI "int \fBminMbdRefreshTime\fP"
.br
.ti -1c
.RI "int \fBenableStopAskingLicenses2LS\fP"
.br
.ti -1c
.RI "int \fBexpiredTime\fP"
.br
.ti -1c
.RI "char * \fBmbdQueryCPUs\fP"
.br
.ti -1c
.RI "char * \fBdefaultApp\fP"
.br
.ti -1c
.RI "int \fBenableStream\fP"
.br
.ti -1c
.RI "char * \fBstreamFile\fP"
.br
.ti -1c
.RI "int \fBstreamSize\fP"
.br
.ti -1c
.RI "int \fBsyncUpHostStatusWithLIM\fP"
.br
.ti -1c
.RI "char * \fBdefaultSLA\fP"
.br
.ti -1c
.RI "int \fBslaTimer\fP"
.br
.ti -1c
.RI "int \fBmbdEgoTtl\fP"
.br
.ti -1c
.RI "int \fBmbdEgoConnTimeout\fP"
.br
.ti -1c
.RI "int \fBmbdEgoReadTimeout\fP"
.br
.ti -1c
.RI "int \fBmbdUseEgoMXJ\fP"
.br
.ti -1c
.RI "int \fBmbdEgoReclaimByQueue\fP"
.br
.ti -1c
.RI "int \fBdefaultSLAvelocity\fP"
.br
.ti -1c
.RI "char * \fBexitRateTypes\fP"
.br
.ti -1c
.RI "float \fBglobalJobExitRate\fP"
.br
.ti -1c
.RI "int \fBenableJobExitRatePerSlot\fP"
.br
.ti -1c
.RI "int \fBenableMetric\fP"
.br
.ti -1c
.RI "int \fBschMetricsSample\fP"
.br
.ti -1c
.RI "float \fBmaxApsValue\fP"
.br
.ti -1c
.RI "int \fBnewjobRefresh\fP"
.br
.ti -1c
.RI "int \fBpreemptJobType\fP"
.br
.ti -1c
.RI "char * \fBdefaultJgrp\fP"
.br
.ti -1c
.RI "int \fBjobRunlimitRatio\fP"
.br
.ti -1c
.RI "int \fBjobIncludePostproc\fP"
.br
.ti -1c
.RI "int \fBjobPostprocTimeout\fP"
.br
.ti -1c
.RI "int \fBsschedUpdateSummaryInterval\fP"
.br
.ti -1c
.RI "int \fBsschedUpdateSummaryByTask\fP"
.br
.ti -1c
.RI "int \fBsschedRequeueLimit\fP"
.br
.ti -1c
.RI "int \fBsschedRetryLimit\fP"
.br
.ti -1c
.RI "int \fBsschedMaxTasks\fP"
.br
.ti -1c
.RI "int \fBsschedMaxRuntime\fP"
.br
.ti -1c
.RI "char * \fBsschedAcctDir\fP"
.br
.ti -1c
.RI "int \fBjgrpAutoDel\fP"
.br
.ti -1c
.RI "int \fBmaxJobPreempt\fP"
.br
.ti -1c
.RI "int \fBmaxJobRequeue\fP"
.br
.ti -1c
.RI "int \fBnoPreemptRunTimePercent\fP"
.br
.ti -1c
.RI "int \fBnoPreemptFinishTimePercent\fP"
.br
.ti -1c
.RI "int \fBslotReserveQueueLimit\fP"
.br
.ti -1c
.RI "int \fBmaxJobPercentagePerSession\fP"
.br
.ti -1c
.RI "int \fBuseSuspSlots\fP"
.br
.ti -1c
.RI "int \fBmaxStreamFileNum\fP"
.br
.ti -1c
.RI "int \fBprivilegedUserForceBkill\fP"
.br
.ti -1c
.RI "int \fBmcSchedulingEnhance\fP"
.br
.ti -1c
.RI "int \fBmcUpdateInterval\fP"
.br
.ti -1c
.RI "int \fBintersectCandidateHosts\fP"
.br
.ti -1c
.RI "int \fBenforceOneUGLimit\fP"
.br
.ti -1c
.RI "int \fBlogRuntimeESTExceeded\fP"
.br
.ti -1c
.RI "char * \fBcomputeUnitTypes\fP"
.br
.ti -1c
.RI "float \fBfairAdjustFactor\fP"
.br
.ti -1c
.RI "int \fBsimEnableCpuFactor\fP"
.br
.ti -1c
.RI "int \fBextendJobException\fP"
.br
.ti -1c
.RI "char * \fBpreExecExitValues\fP"
.br
.ti -1c
.RI "int \fBenableRunTimeDecay\fP"
.br
.ti -1c
.RI "int \fBnoPreemptInterval\fP"
.br
.ti -1c
.RI "int \fBmaxTotalTimePreempt\fP"
.br
.ti -1c
.RI "int \fBbconfUGDup\fP"
.br
.ti -1c
.RI "int \fBstrictUGCtrl\fP"
.br
.ti -1c
.RI "char * \fBdefaultUserGroup\fP"
.br
.ti -1c
.RI "int \fBenforceUGTree\fP"
.br
.ti -1c
.RI "int \fBpreemptDelayTime\fP"
.br
.ti -1c
.RI "int \fBjobPreprocTimeout\fP"
.br
.ti -1c
.RI "char * \fBallowEventType\fP"
.br
.ti -1c
.RI "int \fBruntimeLogInterval\fP"
.br
.ti -1c
.RI "char * \fBgroupPendJobsBy\fP"
.br
.ti -1c
.RI "char * \fBpendingReasonsExclude\fP"
.br
.ti -1c
.RI "char * \fBpendingTimeRanking\fP"
.br
.ti -1c
.RI "int \fBincludeDetailReasons\fP"
.br
.ti -1c
.RI "char * \fBpendingReasonDir\fP"
.br
.ti -1c
.RI "int \fBforceKillRunLimit\fP"
.br
.ti -1c
.RI "char * \fBforwSlotFactor\fP"
.br
.ti -1c
.RI "int \fBgbResUpdateInterval\fP"
.br
.ti -1c
.RI "int \fBdepJobsEval\fP"
.br
.ti -1c
.RI "float \fBrmtPendJobFactor\fP"
.br
.ti -1c
.RI "int \fBnumSchedMatchThreads\fP"
.br
.ti -1c
.RI "char * \fBbjobsResReqDisplay\fP"
.br
.ti -1c
.RI "int \fBjobSwitch2Event\fP"
.br
.ti -1c
.RI "char * \fBenableDiagnose\fP"
.br
.ti -1c
.RI "char * \fBdiagnoseLogdir\fP"
.br
.ti -1c
.RI "char * \fBmcResourceMatchingCriteria\fP"
.br
.ti -1c
.RI "int \fBlsbEgroupUpdateInterval\fP"
.br
.ti -1c
.RI "int \fBlsbEgroupUpdateIntervalUnit\fP"
.br
.ti -1c
.RI "int \fBisPerJobSortEnableFlg\fP"
.br
.ti -1c
.RI "char * \fBdefaultJobCwd\fP"
.br
.ti -1c
.RI "int \fBjobCwdTtl\fP"
.br
.ti -1c
.RI "long \fBac_def_job_memsize\fP"
.br
.ti -1c
.RI "int \fBac_job_memsize_round_up_unit\fP"
.br
.ti -1c
.RI "int \fBac_job_dispatch_retry_num\fP"
.br
.ti -1c
.RI "int \fBac_jobvm_restore_delay_time\fP"
.br
.ti -1c
.RI "char * \fBdefaultJobOutdir\fP"
.br
.ti -1c
.RI "int \fBresizableJobs\fP"
.br
.ti -1c
.RI "int \fBslotBasedSla\fP"
.br
.ti -1c
.RI "int \fBstripWithMinimumNetwork\fP"
.br
.ti -1c
.RI "int \fBmaxProtocolInstance\fP"
.br
.ti -1c
.RI "int \fBjobDistributeOnHost\fP"
.br
.ti -1c
.RI "char * \fBdefaultResReqOrder\fP"
.br
.ti -1c
.RI "int \fBmaxConcurrentQuery\fP"
.br
.ti -1c
.RI "int \fBcleanPeriodDone\fP"
.br
.ti -1c
.RI "int \fBpowerSuspendTimeout\fP"
.br
.ti -1c
.RI "char * \fBremoveHungJob\fP"
.br
.ti -1c
.RI "int \fBpowerStatusLogMax\fP"
.br
.ti -1c
.RI "int \fBpowerOnWait\fP"
.br
.ti -1c
.RI "char * \fBpowerSuspendCmd\fP"
.br
.ti -1c
.RI "char * \fBpowerResumeCmd\fP"
.br
.ti -1c
.RI "char * \fBpowerResetCmd\fP"
.br
.ti -1c
.RI "int \fBmaxJobPreemptReset\fP"
.br
.ti -1c
.RI "int \fBsecureinfolevel\fP"
.br
.ti -1c
.RI "int \fBenableAdminJobInfo\fP"
.br
.ti -1c
.RI "int \fBsecurityInfoEvt\fP"
.br
.ti -1c
.RI "char * \fBperformanceThresholdFile\fP"
.br
.ti -1c
.RI "int \fBorphanJobTermGracePeriod\fP"
.br
.ti -1c
.RI "int \fBlocalMaxPreExecRetryAction\fP"
.br
.ti -1c
.RI "int \fBpmrUpdateSummaryInterval\fP"
.br
.ti -1c
.RI "int \fBac_defrag_max_concurrent_num_jobs\fP"
.br
.ti -1c
.RI "int \fBac_defrag_acct_disable\fP"
.br
.ti -1c
.RI "int \fBcuInteractionWithHostPref\fP"
.br
.ti -1c
.RI "int \fBmcSortBySubmitTime\fP"
.br
.ti -1c
.RI "int \fBmaxEstTimeThreshold\fP"
.br
.ti -1c
.RI "int \fBmaxEstJobsThreshold\fP"
.br
.ti -1c
.RI "int \fBmaxEstRuntimeThreshold\fP"
.br
.ti -1c
.RI "int \fBmaxEstPerStepTime\fP"
.br
.ti -1c
.RI "int \fBestimatedPerReportNum\fP"
.br
.ti -1c
.RI "int \fBestReportInterval\fP"
.br
.ti -1c
.RI "int \fBestRoundUpTime\fP"
.br
.ti -1c
.RI "int \fBestStartInterval\fP"
.br
.ti -1c
.RI "int \fBminAllocDuration\fP"
.br
.ti -1c
.RI "int \fBmaxAllocDuration\fP"
.br
.ti -1c
.RI "int \fBpendInfoSnapshotInterval\fP"
.br
.ti -1c
.RI "int \fBtrackEligiblePendInfo\fP"
.br
.ti -1c
.RI "char * \fBestCPUs\fP"
.br
.ti -1c
.RI "int \fBresizableJobsAdvRsrcreq\fP"
.br
.ti -1c
.RI "int \fBlogJobSignal4HostUnavail\fP"
.br
.ti -1c
.RI "float \fBfwdJobFactor\fP"
.br
.ti -1c
.RI "int \fBeadminTriggerInterval\fP"
.br
.ti -1c
.RI "int \fBpersistLiveConf\fP"
.br
.ti -1c
.RI "int \fBenableAllocPlanner\fP"
.br
.ti -1c
.RI "int \fBallocPlannerWindow\fP"
.br
.ti -1c
.RI "int \fBallocPlannerMaxTime\fP"
.br
.ti -1c
.RI "int \fBenableReserve\fP"
.br
.ti -1c
.RI "int \fBplanDelay\fP"
.br
.ti -1c
.RI "int \fBplanMaxJobs\fP"
.br
.ti -1c
.RI "int \fBestRunTime\fP"
.br
.ti -1c
.RI "char * \fBhostSpec4estRunTime\fP"
.br
.ti -1c
.RI "int \fBrcMaxRequests\fP"
.br
.ti -1c
.RI "int \fBplanRschedTime\fP"
.br
.ti -1c
.RI "int \fBARRunlimitCheck\fP"
.br
.ti -1c
.RI "char * \fBavailableStatus\fP"
.br
.ti -1c
.RI "int \fBARUserACL\fP"
.br
.ti -1c
.RI "int \fBoverRunlimitCheckInterval\fP"
.br
.ti -1c
.RI "int \fBoverRunlimitWaitTime\fP"
.br
.ti -1c
.RI "float \fBgpuTimeFactor\fP"
.br
.ti -1c
.RI "int \fBenableGpuHistTime\fP"
.br
.ti -1c
.RI "int \fBenableDockerImgAff\fP"
.br
.ti -1c
.RI "int \fBallocReuseShare\fP"
.br
.ti -1c
.RI "int \fBjobDispatchPackSize\fP"
.br
.ti -1c
.RI "int \fBmaxJobSchedulingInterval\fP"
.br
.ti -1c
.RI "int \fBschGPDTimeout\fP"
.br
.ti -1c
.RI "int \fBmaxReportIdleJobs\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBparameterInfo\fP structure contains the following fields:. 
.SH "Field Documentation"
.PP 
.SS "char* \fBparameterInfo::defaultQueues\fP"
.PP
DEFAULT_QUEUE: A blank_separated list of queue names for automatic queue selection. 
.PP

.SS "char* \fBparameterInfo::defaultHostSpec\fP"
.PP
DEFAULT_HOST_SPEC: The host name or host model name used as the system default for scaling CPULIMIT and RUNLIMIT. 
.PP

.SS "int \fBparameterInfo::mbatchdInterval\fP"
.PP
MBD_SLEEP_TIME: The interval in seconds at which the mbatchd dispatches jobs. 
.PP

.SS "int \fBparameterInfo::sbatchdInterval\fP"
.PP
SBD_SLEEP_TIME: The interval in seconds at which the sbatchd suspends or resumes jobs. 
.PP

.SS "int \fBparameterInfo::jobAcceptInterval\fP"
.PP
JOB_ACCEPT_INTERVAL: The interval at which a host accepts two successive jobs. 
.PP
(In units of SBD_SLEEP_TIME.) 
.SS "int \fBparameterInfo::jobAcceptIntervalUnit\fP"
.PP
JOB_ACCEPT_INTERVAL unit. 
.PP
.SS "int \fBparameterInfo::maxDispRetries\fP"
.PP
MAX_RETRY: The maximum number of retries for dispatching a job. 
.PP

.SS "int \fBparameterInfo::maxSbdRetries\fP"
.PP
MAX_SBD_FAIL: The maximum number of retries for reaching an sbatchd. 
.PP

.SS "int \fBparameterInfo::preemptPeriod\fP"
.PP
PREEM_PERIOD: The interval in seconds for preempting jobs running on the same host. 
.PP

.SS "int \fBparameterInfo::cleanPeriod\fP"
.PP
CLEAN_PERIOD: The interval in seconds during which finished jobs are kept in core. 
.PP

.SS "int \fBparameterInfo::maxNumJobs\fP"
.PP
MAX_JOB_NUM: The maximum number of finished jobs that are logged in the current event file. 
.PP

.SS "float \fBparameterInfo::historyHours\fP"
.PP
HIST_HOURS: The number of hours of resource consumption history used for fair share scheduling and scheduling within a host partition. 
.PP

.SS "int \fBparameterInfo::pgSuspendIt\fP"
.PP
PG_SUSP_IT: The interval a host must be idle before resuming a job suspended for excessive paging. 
.PP

.SS "char* \fBparameterInfo::defaultProject\fP"
.PP
The default project assigned to jobs. 
.PP

.SS "int \fBparameterInfo::retryIntvl\fP"
.PP
Job submission retry interval. 
.PP
.SS "int \fBparameterInfo::nqsQueuesFlags\fP"
.PP
For Cray NQS compatiblilty only. 
.PP
Used by LSF to get the NQS queue information 
.SS "int \fBparameterInfo::nqsRequestsFlags\fP"
.PP
nqsRequestsFlags 
.PP
.SS "int \fBparameterInfo::maxPreExecRetry\fP"
.PP
The maximum number of times to attempt the preexecution command of a job from a remote cluster ( MultiCluster only). 
.PP
.SS "int \fBparameterInfo::localMaxPreExecRetry\fP"
.PP
Maximum number of pre-exec retry times for local cluster. 
.PP
.SS "int \fBparameterInfo::eventWatchTime\fP"
.PP
Event watching Interval in seconds. 
.PP
.SS "float \fBparameterInfo::runTimeFactor\fP"
.PP
Run time weighting factor for fairshare scheduling. 
.PP
.SS "float \fBparameterInfo::waitTimeFactor\fP"
.PP
Used for calcultion of the fairshare scheduling formula. 
.PP
.SS "float \fBparameterInfo::runJobFactor\fP"
.PP
Job slots weighting factor for fairshare scheduling. 
.PP
.SS "int \fBparameterInfo::eEventCheckIntvl\fP"
.PP
Default check interval. 
.PP
.SS "int \fBparameterInfo::rusageUpdateRate\fP"
.PP
sbatchd report every sbd_sleep_time 
.PP
.SS "int \fBparameterInfo::rusageUpdatePercent\fP"
.PP
sbatchd updates jobs \fBjRusage\fP in mbatchd if more than 10% changes 
.PP
.SS "int \fBparameterInfo::condCheckTime\fP"
.PP
Time period to check for reconfig. 
.PP
.SS "int \fBparameterInfo::maxSbdConnections\fP"
.PP
The maximum number of connections between master and server batch daemons. 
.PP
.SS "int \fBparameterInfo::rschedInterval\fP"
.PP
The interval for rescheduling jobs. 
.PP
.SS "int \fBparameterInfo::maxSchedStay\fP"
.PP
Max time mbatchd stays in scheduling routine, after which take a breather. 
.PP
.SS "int \fBparameterInfo::freshPeriod\fP"
.PP
During which load remains fresh. 
.PP
.SS "int \fBparameterInfo::preemptFor\fP"
.PP
The preemption behavior, GROUP_MAX, GROUP_JLP, USER_JLP, HOST_JLU,MINI_JOB, LEAST_RUN_TIME. 
.PP
.SS "int \fBparameterInfo::adminSuspend\fP"
.PP
Flags whether users can resume their jobs when suspended by the LSF administrator. 
.PP
.SS "int \fBparameterInfo::userReservation\fP"
.PP
Flags to enable/disable normal user to create advance reservation. 
.PP
.SS "float \fBparameterInfo::cpuTimeFactor\fP"
.PP
CPU time weighting factor for fairshare scheduling. 
.PP
.SS "int \fBparameterInfo::fyStart\fP"
.PP
The starting month for a fiscal year. 
.PP
.SS "int \fBparameterInfo::maxJobArraySize\fP"
.PP
The maximum number of jobs in a job array. 
.PP
.SS "time_t \fBparameterInfo::exceptReplayPeriod\fP"
.PP
Replay period for exceptions, in seconds. 
.PP
.SS "int \fBparameterInfo::jobTerminateInterval\fP"
.PP
The interval to terminate a job. 
.PP
.SS "int \fBparameterInfo::disableUAcctMap\fP"
.PP
User level account mapping for remote jobs is disabled. 
.PP
.SS "int \fBparameterInfo::enforceFSProj\fP"
.PP
If set to TRUE, Project name for a job will be considerred when doing fairshare scheduling, i.e., as if user has submitted jobs using -G. 
.PP
.SS "int \fBparameterInfo::enforceProjCheck\fP"
.PP
Enforces the check to see if the invoker of bsub is in the specifed group when the -P option is used. 
.PP
.SS "int \fBparameterInfo::jobRunTimes\fP"
.PP
Run time for a job. 
.PP
.SS "int \fBparameterInfo::dbDefaultIntval\fP"
.PP
Event table Job default interval. 
.PP
.SS "int \fBparameterInfo::dbHjobCountIntval\fP"
.PP
Event table Job Host Count. 
.PP
.SS "int \fBparameterInfo::dbQjobCountIntval\fP"
.PP
Event table Job Queue Count. 
.PP
.SS "int \fBparameterInfo::dbUjobCountIntval\fP"
.PP
Event table Job User Count. 
.PP
.SS "int \fBparameterInfo::dbJobResUsageIntval\fP"
.PP
Event table Job Resource Interval. 
.PP
.SS "int \fBparameterInfo::dbLoadIntval\fP"
.PP
Event table Resource Load Interval. 
.PP
.SS "int \fBparameterInfo::dbJobInfoIntval\fP"
.PP
Event table Job Info. 
.PP
.SS "int \fBparameterInfo::jobDepLastSub\fP"
.PP
Used with job dependency scheduling. 
.PP
.SS "int \fBparameterInfo::maxJobNameDep\fP"
.PP
Used with job dependency scheduling, deprecated. 
.PP
.SS "char* \fBparameterInfo::dbSelectLoad\fP"
.PP
Select resources to be logged. 
.PP
.SS "int \fBparameterInfo::jobSynJgrp\fP"
.PP
Job synchronizes its group status. 
.PP
.SS "char* \fBparameterInfo::pjobSpoolDir\fP"
.PP
The batch jobs' temporary output directory. 
.PP
.SS "int \fBparameterInfo::maxUserPriority\fP"
.PP
Maximal job priority defined for all users. 
.PP
.SS "int \fBparameterInfo::jobPriorityValue\fP"
.PP
Job priority is increased by the system dynamically based on waiting time. 
.PP
.SS "int \fBparameterInfo::jobPriorityTime\fP"
.PP
Waiting time to increase Job priority by the system dynamically. 
.PP
.SS "int \fBparameterInfo::enableAutoAdjust\fP"
.PP
Enable internal statistical adjustment. 
.PP
.SS "int \fBparameterInfo::autoAdjustAtNumPend\fP"
.PP
Start to autoadjust when the user has this number of pending jobs. 
.PP
.SS "float \fBparameterInfo::autoAdjustAtPercent\fP"
.PP
If this number of jobs has been visited skip the user. 
.PP
.SS "int \fBparameterInfo::sharedResourceUpdFactor\fP"
.PP
Static shared resource update interval for the cluster actor. 
.PP
.SS "int \fBparameterInfo::scheRawLoad\fP"
.PP
Schedule job based on raw load info. 
.PP
.SS "char* \fBparameterInfo::jobAttaDir\fP"
.PP
The batch jobs' external storage for attached data. 
.PP
.SS "int \fBparameterInfo::maxJobMsgNum\fP"
.PP
Maximum message number for each job. 
.PP
.SS "int \fBparameterInfo::maxJobAttaSize\fP"
.PP
Maximum attached data size to be transferred for each message. 
.PP
.SS "int \fBparameterInfo::mbdRefreshTime\fP"
.PP
The life time of a child MBD to serve queries in the MT way. 
.PP
.SS "int \fBparameterInfo::updJobRusageInterval\fP"
.PP
The interval of the execution cluster updating the job's resource usage. 
.PP
.SS "char* \fBparameterInfo::sysMapAcct\fP"
.PP
The account to which all windows workgroup users are to be mapped. 
.PP
.SS "int \fBparameterInfo::preExecDelay\fP"
.PP
Dispatch delay internal. 
.PP
.SS "int \fBparameterInfo::updEventUpdateInterval\fP"
.PP
Update duplicate event interval. 
.PP
.SS "int \fBparameterInfo::resourceReservePerSlot\fP"
.PP
Resources are reserved for parallel jobs on a per-slot basis. 
.PP
.SS "int \fBparameterInfo::maxJobId\fP"
.PP
Maximum job id --- read from the lsb.params. 
.PP
.SS "char* \fBparameterInfo::preemptResourceList\fP"
.PP
Define a list of preemptable resource names. 
.PP
.SS "int \fBparameterInfo::preemptionWaitTime\fP"
.PP
The preemption wait time. 
.PP
.SS "int \fBparameterInfo::maxAcctArchiveNum\fP"
.PP
Maximum number of rollover lsb.acct files kept by mbatchd. 
.PP
.SS "int \fBparameterInfo::acctArchiveInDays\fP"
.PP
mbatchd Archive Interval 
.PP
.SS "int \fBparameterInfo::acctArchiveInSize\fP"
.PP
mbatchd Archive threshold 
.PP
.SS "float \fBparameterInfo::committedRunTimeFactor\fP"
.PP
Committed run time weighting factor. 
.PP
.SS "int \fBparameterInfo::enableHistRunTime\fP"
.PP
Enable the use of historical run time in the calculation of fairshare scheduling priority, Disable the use of historical run time in the calculation of fairshare scheduling priority. 
.PP
.SS "int \fBparameterInfo::mcbOlmReclaimTimeDelay\fP"
.PP
Open lease reclaim time. 
.PP
.SS "int \fBparameterInfo::chunkJobDuration\fP"
.PP
Enable chunk job dispatch for jobs with CPU limit or run limits. 
.PP
.SS "int \fBparameterInfo::sessionInterval\fP"
.PP
The interval for scheduling jobs by scheduler daemon. 
.PP
.SS "int \fBparameterInfo::publishReasonJobNum\fP"
.PP
The number of jobs per user per queue whose pending reason is published at the PEND_REASON_UPDATE_INTERVAL interval. 
.PP
.SS "int \fBparameterInfo::publishReasonInterval\fP"
.PP
The interval for publishing job pending reason by scheduler daemon. 
.PP
.SS "int \fBparameterInfo::publishReason4AllJobInterval\fP"
.PP
Interval(in seconds) of pending reason publish for all jobs. 
.PP
.SS "int \fBparameterInfo::mcUpdPendingReasonInterval\fP"
.PP
MC pending reason update interval (0 means no updates). 
.PP
.SS "int \fBparameterInfo::mcUpdPendingReasonPkgSize\fP"
.PP
MC pending reason update package size (0 means no limit). 
.PP
.SS "int \fBparameterInfo::noPreemptRunTime\fP"
.PP
No preemption if the run time is greater than the value defined in here. 
.PP
.SS "int \fBparameterInfo::noPreemptFinishTime\fP"
.PP
No preemption if the finish time is less than the value defined in here. 
.PP
.SS "char* \fBparameterInfo::acctArchiveAt\fP"
.PP
mbatchd Archive Time 
.PP
.SS "int \fBparameterInfo::absoluteRunLimit\fP"
.PP
Absolute run limit for job. 
.PP
.SS "int \fBparameterInfo::lsbExitRateDuration\fP"
.PP
The job exit rate duration. 
.PP
.SS "int \fBparameterInfo::lsbTriggerDuration\fP"
.PP
The duration to trigger eadmin. 
.PP
.SS "int \fBparameterInfo::maxJobinfoQueryPeriod\fP"
.PP
Maximum time for job information query commands (for example,with bjobs) to wait. 
.PP
.SS "int \fBparameterInfo::jobSubRetryInterval\fP"
.PP
Job submission retrial interval for client. 
.PP
.SS "int \fBparameterInfo::pendingJobThreshold\fP"
.PP
System wide max pending jobs. 
.PP
.SS "int \fBparameterInfo::pendingJobSlotsThreshold\fP"
.PP
System wide max pending jobs slots. 
.PP
.SS "int \fBparameterInfo::totalRunPendJobThreshold\fP"
.PP
System wide max pending + running jobs. 
.PP
.SS "int \fBparameterInfo::maxConcurrentJobQuery\fP"
.PP
Max number of concurrent job query. 
.PP
.SS "int \fBparameterInfo::minSwitchPeriod\fP"
.PP
Min event switch time period. 
.PP
.SS "int \fBparameterInfo::condensePendingReasons\fP"
.PP
Condense pending reasons enabled. 
.PP
.SS "int \fBparameterInfo::slotBasedParallelSched\fP"
.PP
Schedule Parallel jobs based on slots instead of CPUs. 
.PP
.SS "int \fBparameterInfo::disableUserJobMovement\fP"
.PP
Disable user job movement operations, like btop/bbot. 
.PP
.SS "int \fBparameterInfo::detectIdleJobAfter\fP"
.PP
Detect and report idle jobs only after specified minutes. 
.PP
.SS "int \fBparameterInfo::useSymbolPriority\fP"
.PP
Use symbolic when specifing priority of symphony jobs. 
.PP
.SS "int \fBparameterInfo::JobPriorityRound\fP"
.PP
Priority rounding for symphony jobs. 
.PP
.SS "char* \fBparameterInfo::priorityMapping\fP"
.PP
The mapping of the symbolic priority for symphony jobs. 
.PP
.SS "int \fBparameterInfo::maxInfoDirs\fP"
.PP
Maximum number of subdirectories under LSB_SHAREDIR/cluster/logdir/info. 
.PP
.SS "int \fBparameterInfo::minMbdRefreshTime\fP"
.PP
The minimum period of a child MBD to serve queries in the MT way. 
.PP
.SS "int \fBparameterInfo::enableStopAskingLicenses2LS\fP"
.PP
Stop asking license to LS not due to lack license. 
.PP
.SS "int \fBparameterInfo::expiredTime\fP"
.PP
Expire time for finished job which will not taken into account when calculating queue fairshare priority. 
.PP
.SS "char* \fBparameterInfo::mbdQueryCPUs\fP"
.PP
MBD child query processes will only run on the following CPUs. 
.PP
.SS "char* \fBparameterInfo::defaultApp\fP"
.PP
The default application profile assigned to jobs. 
.PP
.SS "int \fBparameterInfo::enableStream\fP"
.PP
Enable or disable data streaming. 
.PP
.SS "char* \fBparameterInfo::streamFile\fP"
.PP
File to which lsbatch data is streamed. 
.PP
.SS "int \fBparameterInfo::streamSize\fP"
.PP
File size in MB to which lsbatch data is streamed. 
.PP
.SS "int \fBparameterInfo::syncUpHostStatusWithLIM\fP"
.PP
Sync up host status with master LIM is enabled. 
.PP
.SS "char* \fBparameterInfo::defaultSLA\fP"
.PP
Project schedulign default SLA. 
.PP
.SS "int \fBparameterInfo::slaTimer\fP"
.PP
EGO Enabled SLA scheduling timer period. 
.PP
.SS "int \fBparameterInfo::mbdEgoTtl\fP"
.PP
EGO Enabled SLA scheduling time to live. 
.PP
.SS "int \fBparameterInfo::mbdEgoConnTimeout\fP"
.PP
EGO Enabled SLA scheduling connection timeout. 
.PP
.SS "int \fBparameterInfo::mbdEgoReadTimeout\fP"
.PP
EGO Enabled SLA scheduling read timeout. 
.PP
.SS "int \fBparameterInfo::mbdUseEgoMXJ\fP"
.PP
EGO Enabled SLA scheduling use MXJ flag. 
.PP
.SS "int \fBparameterInfo::mbdEgoReclaimByQueue\fP"
.PP
EGO Enabled SLA scheduling reclaim by queue. 
.PP
.SS "int \fBparameterInfo::defaultSLAvelocity\fP"
.PP
EGO Enabled SLA scheduling default velocity. 
.PP
.SS "char* \fBparameterInfo::exitRateTypes\fP"
.PP
Type of host exit rate exception handling types: EXIT_RATE_TYPE. 
.PP
.SS "float \fBparameterInfo::globalJobExitRate\fP"
.PP
Type of host exit rate exception handling types: GLOBAL_EXIT_RATE. 
.PP
.SS "int \fBparameterInfo::enableJobExitRatePerSlot\fP"
.PP
Type of host exit rate exception handling types ENABLE_EXIT_RATE_PER_SLOT. 
.PP
.SS "int \fBparameterInfo::enableMetric\fP"
.PP
Performance metrics monitor is enabled flag. 
.PP
.SS "int \fBparameterInfo::schMetricsSample\fP"
.PP
Performance metrics monitor sample period flag. 
.PP
.SS "float \fBparameterInfo::maxApsValue\fP"
.PP
Used to bound: (1) factors, (2) weights, and (3) APS values. 
.PP
.SS "int \fBparameterInfo::newjobRefresh\fP"
.PP
Child mbatchd gets updated information about new jobs from the parent mbatchd. 
.PP
.SS "int \fBparameterInfo::preemptJobType\fP"
.PP
Job type to preempt, PREEMPT_JOBTYPE_BACKFILL, PREEMPT_JOBTYPE_EXCLUSIVE. 
.PP
.SS "char* \fBparameterInfo::defaultJgrp\fP"
.PP
The default job group assigned to jobs. 
.PP
.SS "int \fBparameterInfo::jobRunlimitRatio\fP"
.PP
Max ratio between run limit and runtime estimation. 
.PP
.SS "int \fBparameterInfo::jobIncludePostproc\fP"
.PP
Enable the post-execution processing of the job to be included as part of the job flag. 
.PP
.SS "int \fBparameterInfo::jobPostprocTimeout\fP"
.PP
Timeout of post-execution processing. 
.PP
.SS "int \fBparameterInfo::sschedUpdateSummaryInterval\fP"
.PP
The interval, in seconds, for updating the session scheduler status summary. 
.PP
.SS "int \fBparameterInfo::sschedUpdateSummaryByTask\fP"
.PP
The number of completed tasks for updating the session scheduler status summary. 
.PP
.SS "int \fBparameterInfo::sschedRequeueLimit\fP"
.PP
The maximum number of times a task can be requeued via requeue exit values. 
.PP
.SS "int \fBparameterInfo::sschedRetryLimit\fP"
.PP
The maximum number of times a task can be retried after a dispatch error. 
.PP
.SS "int \fBparameterInfo::sschedMaxTasks\fP"
.PP
The maximum number of tasks that can be submitted in one session. 
.PP
.SS "int \fBparameterInfo::sschedMaxRuntime\fP"
.PP
The maximum run time of a single task. 
.PP
.SS "char* \fBparameterInfo::sschedAcctDir\fP"
.PP
The output directory for task accounting files. 
.PP
.SS "int \fBparameterInfo::jgrpAutoDel\fP"
.PP
If TRUE enable the job group automatic deletion functionality (default is FALSE). 
.PP

.SS "int \fBparameterInfo::maxJobPreempt\fP"
.PP
Maximum number of job preempted times. 
.PP
.SS "int \fBparameterInfo::maxJobRequeue\fP"
.PP
Maximum number of job re-queue times. 
.PP
.SS "int \fBparameterInfo::noPreemptRunTimePercent\fP"
.PP
No preempt run time percent. 
.PP
.SS "int \fBparameterInfo::noPreemptFinishTimePercent\fP"
.PP
No preempt finish time percent. 
.PP
.SS "int \fBparameterInfo::slotReserveQueueLimit\fP"
.PP
The reservation request being within JL/U. 
.PP

.SS "int \fBparameterInfo::maxJobPercentagePerSession\fP"
.PP
Job accept limit percentage. 
.PP

.SS "int \fBparameterInfo::useSuspSlots\fP"
.PP
The low priority job will use the slots freed by preempted jobs. 
.PP

.SS "int \fBparameterInfo::maxStreamFileNum\fP"
.PP
Maximum number of the backup stream.utc files. 
.PP
.SS "int \fBparameterInfo::privilegedUserForceBkill\fP"
.PP
If enforced only admin can use bkill -r option. 
.PP
.SS "int \fBparameterInfo::mcSchedulingEnhance\fP"
.PP
It controls the remote queue selection flow. 
.PP

.SS "int \fBparameterInfo::mcUpdateInterval\fP"
.PP
It controls update interval of the counters and other original data in MC implementation. 
.PP
.SS "int \fBparameterInfo::intersectCandidateHosts\fP"
.PP
Jobs run on only on hosts belonging to the intersection of the queue the job was submitted to, advance reservation hosts, and any hosts specified by bsub -m at the time of submission. 
.PP

.SS "int \fBparameterInfo::enforceOneUGLimit\fP"
.PP
Enforces the limitations of a single specified user group. 
.PP

.SS "int \fBparameterInfo::logRuntimeESTExceeded\fP"
.PP
Enable or disable logging runtime estimation exceeded event. 
.PP
.SS "char* \fBparameterInfo::computeUnitTypes\fP"
.PP
Compute unit types. 
.PP

.SS "float \fBparameterInfo::fairAdjustFactor\fP"
.PP
Fairshare adjustment weighting factor. 
.PP
.SS "int \fBparameterInfo::simEnableCpuFactor\fP"
.PP
abs runtime and cputime for LSF simulator 
.PP
.SS "int \fBparameterInfo::extendJobException\fP"
.PP
switch for job exception enhancement 
.PP
.SS "char* \fBparameterInfo::preExecExitValues\fP"
.PP
If the pre_exec script of a job in the cluster exits with an exit code specified in preExecExitValues, the job will be re-dispatched to a different host. 
.PP

.SS "int \fBparameterInfo::enableRunTimeDecay\fP"
.PP
Enable the decay of run time in the calculation of fairshare scheduling priority. 
.PP
.SS "int \fBparameterInfo::noPreemptInterval\fP"
.PP
Uninterrupted running time (minutes) before job can be preempted. 
.PP

.SS "int \fBparameterInfo::maxTotalTimePreempt\fP"
.PP
Maximum accumulated preemption time (minutes). 
.PP

.SS "int \fBparameterInfo::bconfUGDup\fP"
.PP
bconf accepts requests to create or delete user groups with same name as system groups 
.PP
.SS "int \fBparameterInfo::strictUGCtrl\fP"
.PP
enable or disable strict user group control 
.PP
.SS "char* \fBparameterInfo::defaultUserGroup\fP"
.PP
enable or disable job's default user group 
.PP
.SS "int \fBparameterInfo::enforceUGTree\fP"
.PP
enable or disable enforce user group tree 
.PP
.SS "int \fBparameterInfo::preemptDelayTime\fP"
.PP
The grace period before preemption. 
.PP
.SS "int \fBparameterInfo::jobPreprocTimeout\fP"
.PP
Timeout of pre-execution processing. 
.PP
.SS "char* \fBparameterInfo::allowEventType\fP"
.PP
Log specified events into stream file. 
.PP
.SS "int \fBparameterInfo::runtimeLogInterval\fP"
.PP
Interval between runtime status log. 
.PP
.SS "char* \fBparameterInfo::groupPendJobsBy\fP"
.PP
Group pending jobs by these key fields. 
.PP
.SS "char* \fBparameterInfo::pendingReasonsExclude\fP"
.PP
Don't log the defined pending reason. 
.PP
.SS "char* \fBparameterInfo::pendingTimeRanking\fP"
.PP
Group pending jobs by pending time. 
.PP
.SS "int \fBparameterInfo::includeDetailReasons\fP"
.PP
Disable to stop log detailed pending reasons. 
.PP
.SS "char* \fBparameterInfo::pendingReasonDir\fP"
.PP
Full path to the pending reasons cache file directory. 
.PP
.SS "int \fBparameterInfo::forceKillRunLimit\fP"
.PP
Force kill the job exceeding RUNLIMIT, backward compatibility. 
.PP
.SS "char* \fBparameterInfo::forwSlotFactor\fP"
.PP
GridBroker slot factor. 
.PP
.SS "int \fBparameterInfo::gbResUpdateInterval\fP"
.PP
Resource update interval to GridBroker. 
.PP
.SS "int \fBparameterInfo::depJobsEval\fP"
.PP
Number of jobs threshold of mbatchd to evaluate jobs with dependency. 
.PP
.SS "float \fBparameterInfo::rmtPendJobFactor\fP"
.PP
LSF/XL remote pending factor. 
.PP
.SS "int \fBparameterInfo::numSchedMatchThreads\fP"
.PP
number scheduler matching threads 
.PP
.SS "char* \fBparameterInfo::bjobsResReqDisplay\fP"
.PP
control how many levels resreq bjobs can display 
.PP
.SS "int \fBparameterInfo::jobSwitch2Event\fP"
.PP
Enable/Disable 'JOB_SWITCH2' event log. 
.PP
.SS "char* \fBparameterInfo::enableDiagnose\fP"
.PP
Enable diagnose class types: query. 
.PP
.SS "char* \fBparameterInfo::diagnoseLogdir\fP"
.PP
The log directory for query diagnosis. 
.PP
.SS "char* \fBparameterInfo::mcResourceMatchingCriteria\fP"
.PP
The MC scheduling resource criterion. 
.PP
.SS "int \fBparameterInfo::lsbEgroupUpdateInterval\fP"
.PP
Interval to dynamically update egroup managed host and user groups. 
.PP
.SS "int \fBparameterInfo::lsbEgroupUpdateIntervalUnit\fP"
.PP
Unit of interval to update egroup. 
.PP
0: Hours, 1: Minutes 
.SS "int \fBparameterInfo::isPerJobSortEnableFlg\fP"
.PP
TRUE if SCHED_PER_JOB_SORT=Y/y. 
.PP
.SS "char* \fBparameterInfo::defaultJobCwd\fP"
.PP
default job cwd 
.PP
.SS "int \fBparameterInfo::jobCwdTtl\fP"
.PP
job cwd TTL 
.PP
.SS "long \fBparameterInfo::ac_def_job_memsize\fP"
.PP
Default memory requirement for a VM job (MB). 
.PP
.SS "int \fBparameterInfo::ac_job_memsize_round_up_unit\fP"
.PP
The round-up unit of the memory size for a VM job (MB). 
.PP
.SS "int \fBparameterInfo::ac_job_dispatch_retry_num\fP"
.PP
The number of times that a Dynamic Cluster job can be retried after a dispatch failure. 
.PP
.SS "int \fBparameterInfo::ac_jobvm_restore_delay_time\fP"
.PP
The job vm restore delay time. 
.PP
.SS "char* \fBparameterInfo::defaultJobOutdir\fP"
.PP
default job outdir 
.PP
.SS "int \fBparameterInfo::resizableJobs\fP"
.PP
Enable or disable the resizable job feature. 
.PP
.SS "int \fBparameterInfo::slotBasedSla\fP"
.PP
Enable or disable slots based request for EGO-enabled SLA. 
.PP
.SS "int \fBparameterInfo::stripWithMinimumNetwork\fP"
.PP
strip with minimum network 
.PP
.SS "int \fBparameterInfo::maxProtocolInstance\fP"
.PP
maximum allowed window instances for pe job 
.PP
.SS "int \fBparameterInfo::jobDistributeOnHost\fP"
.PP
how to distribute tasks for different jobs on same host 
.PP
.SS "char* \fBparameterInfo::defaultResReqOrder\fP"
.PP
batch part default order 
.PP
.SS "int \fBparameterInfo::maxConcurrentQuery\fP"
.PP
Max number of concurrent query. 
.PP
.SS "int \fBparameterInfo::cleanPeriodDone\fP"
.PP
CLEAN_PERIOD_DONE: The interval in seconds during which finished DONE jobs are kept in core. 
.PP

.SS "int \fBparameterInfo::powerSuspendTimeout\fP"
.PP
Time out for power suspend actions. 
.PP
.SS "char* \fBparameterInfo::removeHungJob\fP"
.PP
Remove hung job depends on conditions. 
.PP
.SS "int \fBparameterInfo::powerStatusLogMax\fP"
.PP
The maximum number of host power status logs that can be stored in current events file. 
.PP
.SS "int \fBparameterInfo::powerOnWait\fP"
.PP
The number of seconds to wait before dispatching job after host is powered on. 
.PP
.SS "char* \fBparameterInfo::powerSuspendCmd\fP"
.PP
host suspend command 
.PP
.SS "char* \fBparameterInfo::powerResumeCmd\fP"
.PP
host resume command 
.PP
.SS "char* \fBparameterInfo::powerResetCmd\fP"
.PP
host reset command 
.PP
.SS "int \fBparameterInfo::maxJobPreemptReset\fP"
.PP
Reset job preempted counter when started job is requeued, migrated, or rerun. 
.PP
.SS "int \fBparameterInfo::secureinfolevel\fP"
.PP
secure info level 
.PP
.SS "int \fBparameterInfo::enableAdminJobInfo\fP"
.PP
enable rights of admin for accessing job detail info 
.PP
.SS "int \fBparameterInfo::securityInfoEvt\fP"
.PP
ACL security info event parameter to control whether a user can view other's job through bacct and bhist. 
.PP
.SS "char* \fBparameterInfo::performanceThresholdFile\fP"
.PP
Full path of performance threshold file for the cluster. 
.PP
.SS "int \fBparameterInfo::orphanJobTermGracePeriod\fP"
.PP
Grace period for orphan job termination. 
.PP
.SS "int \fBparameterInfo::localMaxPreExecRetryAction\fP"
.PP
The action taken when job's pre-exec retry times reach the limit. 
.PP

.SS "int \fBparameterInfo::pmrUpdateSummaryInterval\fP"
.PP
The interval, in seconds, for updating the pmr status summary. 
.PP
.SS "int \fBparameterInfo::ac_defrag_max_concurrent_num_jobs\fP"
.PP
The maximum concurrent number of Dynamic Cluster jobs in host defragmentation. 
.PP
.SS "int \fBparameterInfo::ac_defrag_acct_disable\fP"
.PP
Disable generating \\'JOB_RESIZE\\' event log in lsb.acct when live-migrating a Dynamic Cluster job associated with host defragmentation. 
.PP
.SS "int \fBparameterInfo::cuInteractionWithHostPref\fP"
.PP
CU interaction with Host Pref. 
.PP
.SS "int \fBparameterInfo::mcSortBySubmitTime\fP"
.PP
Enable adaptive chunking feature. 
.PP
Enable sorting forwarded jobs by its submission time 
.SS "int \fBparameterInfo::maxEstTimeThreshold\fP"
.PP
Maximum period of time can be estimated in future. 
.PP
.SS "int \fBparameterInfo::maxEstJobsThreshold\fP"
.PP
Maximum number of jobs can be estimated in future. 
.PP
.SS "int \fBparameterInfo::maxEstRuntimeThreshold\fP"
.PP
Maximum elapsed time that estimator can run. 
.PP
.SS "int \fBparameterInfo::maxEstPerStepTime\fP"
.PP
Maximum time each step to future. 
.PP
.SS "int \fBparameterInfo::estimatedPerReportNum\fP"
.PP
Number of jobs report each time. 
.PP
.SS "int \fBparameterInfo::estReportInterval\fP"
.PP
Interval to report estimated start times. 
.PP
.SS "int \fBparameterInfo::estRoundUpTime\fP"
.PP
Round up time to group adjacent simulation events. 
.PP
.SS "int \fBparameterInfo::estStartInterval\fP"
.PP
Interval to start next round of estimation. 
.PP
.SS "int \fBparameterInfo::minAllocDuration\fP"
.PP
Minimum allocation duration. 
.PP
.SS "int \fBparameterInfo::maxAllocDuration\fP"
.PP
Maximum allocation duration. 
.PP
.SS "int \fBparameterInfo::pendInfoSnapshotInterval\fP"
.PP
pend info snapshot interval 
.PP
.SS "int \fBparameterInfo::trackEligiblePendInfo\fP"
.PP
track eligible pend info 
.PP
.SS "char* \fBparameterInfo::estCPUs\fP"
.PP
LSF estimator processes will only run on the following CPUs. 
.PP
.SS "int \fBparameterInfo::resizableJobsAdvRsrcreq\fP"
.PP
Enable resizable jobs with adv rsrcreq, not displayed in bparams output. 
.PP
.SS "int \fBparameterInfo::logJobSignal4HostUnavail\fP"
.PP
When server hosts become available, we log job requeue signal into lsb.stream file for rerunnable jobs running on those hosts. 
.PP
.SS "float \fBparameterInfo::fwdJobFactor\fP"
.PP
Job slots weighting factor for fairshare scheduling. 
.PP
.SS "int \fBparameterInfo::eadminTriggerInterval\fP"
.PP
Interval of mbatchd to invoke eadmin. 
.PP
.SS "int \fBparameterInfo::persistLiveConf\fP"
.PP
Enable/disable persisting bconf request by mbatchd. 
.PP
.SS "int \fBparameterInfo::enableAllocPlanner\fP"
.PP
enable the future alloc planner 
.PP
.SS "int \fBparameterInfo::allocPlannerWindow\fP"
.PP
measured in minutes, ignored if enableAllocPlanner is false 
.PP
.SS "int \fBparameterInfo::allocPlannerMaxTime\fP"
.PP
timeout period for the scout scheduler 
.PP
.SS "int \fBparameterInfo::enableReserve\fP"
.PP
Y|N, to enable enableAllocPlanner must also be enabled. 
.PP
.SS "int \fBparameterInfo::planDelay\fP"
.PP
reserve to have a delay before starting 
.PP
.SS "int \fBparameterInfo::planMaxJobs\fP"
.PP
reserve to have max jobs 
.PP
.SS "int \fBparameterInfo::estRunTime\fP"
.PP
estimated run time 
.PP
.SS "char* \fBparameterInfo::hostSpec4estRunTime\fP"
.PP
host spec from estimated run time 
.PP
.SS "int \fBparameterInfo::rcMaxRequests\fP"
.PP
RC_MAX_REQUESTS. 
.PP
.SS "int \fBparameterInfo::planRschedTime\fP"
.PP
time duration (in minutes) to recreate a plan 
.PP
.SS "int \fBparameterInfo::ARRunlimitCheck\fP"
.PP
whether to dispatch if job passes AR end time 
.PP
.SS "char* \fBparameterInfo::availableStatus\fP"
.PP
host status's that translate to available, see hData 
.PP
.SS "int \fBparameterInfo::ARUserACL\fP"
.PP
check user permissions before dispatching the AR job 
.PP
.SS "int \fBparameterInfo::overRunlimitCheckInterval\fP"
.PP
time interval for check job runs over runlimit 
.PP
.SS "int \fBparameterInfo::overRunlimitWaitTime\fP"
.PP
wait time before the job runs over runlimit 
.PP
.SS "float \fBparameterInfo::gpuTimeFactor\fP"
.PP
GPU run time weighting factor for fairshare scheduling. 
.PP
.SS "int \fBparameterInfo::enableGpuHistTime\fP"
.PP
Enable GPU historical run time for fairshare scheduling. 
.PP
.SS "int \fBparameterInfo::enableDockerImgAff\fP"
.PP
CSM_VALID_SMT, validSmtValues[0] is default. 
.PP
.SS "int \fBparameterInfo::allocReuseShare\fP"
.PP
Relaxed job order policy by re-using the following allocations: user | project | group. 
.PP
.SS "int \fBparameterInfo::jobDispatchPackSize\fP"
.PP
mbschd publishes decisions if the current decision number reaches the size 
.PP
.SS "int \fBparameterInfo::maxJobSchedulingInterval\fP"
.PP
mbschd stops further scheduling if it has spent time over the interval 
.PP
.SS "int \fBparameterInfo::schGPDTimeout\fP"
.PP
Timeout for scheduler connect GPD. 
.PP
.SS "int \fBparameterInfo::maxReportIdleJobs\fP"
.PP
Maximum number of report idle jobs each time eadmin is triggered. 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for IBM Spectrum LSF 10.1 C API Reference from the source code.
